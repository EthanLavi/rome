// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: colosseum.proto

#include "colosseum.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace rome {
PROTOBUF_CONSTEXPR WorkloadDriverProto::WorkloadDriverProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ops_)*/nullptr
  , /*decltype(_impl_.runtime_)*/nullptr
  , /*decltype(_impl_.qps_)*/nullptr
  , /*decltype(_impl_.latency_)*/nullptr} {}
struct WorkloadDriverProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkloadDriverProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkloadDriverProtoDefaultTypeInternal() {}
  union {
    WorkloadDriverProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkloadDriverProtoDefaultTypeInternal _WorkloadDriverProto_default_instance_;
}  // namespace rome
static ::_pb::Metadata file_level_metadata_colosseum_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_colosseum_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_colosseum_2eproto = nullptr;

const uint32_t TableStruct_colosseum_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::rome::WorkloadDriverProto, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::rome::WorkloadDriverProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rome::WorkloadDriverProto, _impl_.ops_),
  PROTOBUF_FIELD_OFFSET(::rome::WorkloadDriverProto, _impl_.runtime_),
  PROTOBUF_FIELD_OFFSET(::rome::WorkloadDriverProto, _impl_.qps_),
  PROTOBUF_FIELD_OFFSET(::rome::WorkloadDriverProto, _impl_.latency_),
  0,
  1,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::rome::WorkloadDriverProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::rome::_WorkloadDriverProto_default_instance_._instance,
};

const char descriptor_table_protodef_colosseum_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017colosseum.proto\022\004rome\032\rmetrics.proto\"\275"
  "\001\n\023WorkloadDriverProto\022&\n\003ops\030\002 \001(\0132\031.ro"
  "me.metrics.MetricProto\022*\n\007runtime\030\003 \001(\0132"
  "\031.rome.metrics.MetricProto\022&\n\003qps\030\004 \001(\0132"
  "\031.rome.metrics.MetricProto\022*\n\007latency\030\005 "
  "\001(\0132\031.rome.metrics.MetricProto"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_colosseum_2eproto_deps[1] = {
  &::descriptor_table_metrics_2eproto,
};
static ::_pbi::once_flag descriptor_table_colosseum_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_colosseum_2eproto = {
    false, false, 230, descriptor_table_protodef_colosseum_2eproto,
    "colosseum.proto",
    &descriptor_table_colosseum_2eproto_once, descriptor_table_colosseum_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_colosseum_2eproto::offsets,
    file_level_metadata_colosseum_2eproto, file_level_enum_descriptors_colosseum_2eproto,
    file_level_service_descriptors_colosseum_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_colosseum_2eproto_getter() {
  return &descriptor_table_colosseum_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_colosseum_2eproto(&descriptor_table_colosseum_2eproto);
namespace rome {

// ===================================================================

class WorkloadDriverProto::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkloadDriverProto>()._impl_._has_bits_);
  static const ::rome::metrics::MetricProto& ops(const WorkloadDriverProto* msg);
  static void set_has_ops(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::rome::metrics::MetricProto& runtime(const WorkloadDriverProto* msg);
  static void set_has_runtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::rome::metrics::MetricProto& qps(const WorkloadDriverProto* msg);
  static void set_has_qps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::rome::metrics::MetricProto& latency(const WorkloadDriverProto* msg);
  static void set_has_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::rome::metrics::MetricProto&
WorkloadDriverProto::_Internal::ops(const WorkloadDriverProto* msg) {
  return *msg->_impl_.ops_;
}
const ::rome::metrics::MetricProto&
WorkloadDriverProto::_Internal::runtime(const WorkloadDriverProto* msg) {
  return *msg->_impl_.runtime_;
}
const ::rome::metrics::MetricProto&
WorkloadDriverProto::_Internal::qps(const WorkloadDriverProto* msg) {
  return *msg->_impl_.qps_;
}
const ::rome::metrics::MetricProto&
WorkloadDriverProto::_Internal::latency(const WorkloadDriverProto* msg) {
  return *msg->_impl_.latency_;
}
void WorkloadDriverProto::clear_ops() {
  if (_impl_.ops_ != nullptr) _impl_.ops_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void WorkloadDriverProto::clear_runtime() {
  if (_impl_.runtime_ != nullptr) _impl_.runtime_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void WorkloadDriverProto::clear_qps() {
  if (_impl_.qps_ != nullptr) _impl_.qps_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void WorkloadDriverProto::clear_latency() {
  if (_impl_.latency_ != nullptr) _impl_.latency_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
WorkloadDriverProto::WorkloadDriverProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rome.WorkloadDriverProto)
}
WorkloadDriverProto::WorkloadDriverProto(const WorkloadDriverProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkloadDriverProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ops_){nullptr}
    , decltype(_impl_.runtime_){nullptr}
    , decltype(_impl_.qps_){nullptr}
    , decltype(_impl_.latency_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ops()) {
    _this->_impl_.ops_ = new ::rome::metrics::MetricProto(*from._impl_.ops_);
  }
  if (from._internal_has_runtime()) {
    _this->_impl_.runtime_ = new ::rome::metrics::MetricProto(*from._impl_.runtime_);
  }
  if (from._internal_has_qps()) {
    _this->_impl_.qps_ = new ::rome::metrics::MetricProto(*from._impl_.qps_);
  }
  if (from._internal_has_latency()) {
    _this->_impl_.latency_ = new ::rome::metrics::MetricProto(*from._impl_.latency_);
  }
  // @@protoc_insertion_point(copy_constructor:rome.WorkloadDriverProto)
}

inline void WorkloadDriverProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ops_){nullptr}
    , decltype(_impl_.runtime_){nullptr}
    , decltype(_impl_.qps_){nullptr}
    , decltype(_impl_.latency_){nullptr}
  };
}

WorkloadDriverProto::~WorkloadDriverProto() {
  // @@protoc_insertion_point(destructor:rome.WorkloadDriverProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkloadDriverProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ops_;
  if (this != internal_default_instance()) delete _impl_.runtime_;
  if (this != internal_default_instance()) delete _impl_.qps_;
  if (this != internal_default_instance()) delete _impl_.latency_;
}

void WorkloadDriverProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkloadDriverProto::Clear() {
// @@protoc_insertion_point(message_clear_start:rome.WorkloadDriverProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.ops_ != nullptr);
      _impl_.ops_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.runtime_ != nullptr);
      _impl_.runtime_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.qps_ != nullptr);
      _impl_.qps_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.latency_ != nullptr);
      _impl_.latency_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkloadDriverProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .rome.metrics.MetricProto ops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ops(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .rome.metrics.MetricProto runtime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_runtime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .rome.metrics.MetricProto qps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_qps(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .rome.metrics.MetricProto latency = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_latency(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkloadDriverProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rome.WorkloadDriverProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .rome.metrics.MetricProto ops = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ops(this),
        _Internal::ops(this).GetCachedSize(), target, stream);
  }

  // optional .rome.metrics.MetricProto runtime = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::runtime(this),
        _Internal::runtime(this).GetCachedSize(), target, stream);
  }

  // optional .rome.metrics.MetricProto qps = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::qps(this),
        _Internal::qps(this).GetCachedSize(), target, stream);
  }

  // optional .rome.metrics.MetricProto latency = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::latency(this),
        _Internal::latency(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rome.WorkloadDriverProto)
  return target;
}

size_t WorkloadDriverProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rome.WorkloadDriverProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .rome.metrics.MetricProto ops = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ops_);
    }

    // optional .rome.metrics.MetricProto runtime = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.runtime_);
    }

    // optional .rome.metrics.MetricProto qps = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.qps_);
    }

    // optional .rome.metrics.MetricProto latency = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.latency_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkloadDriverProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkloadDriverProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkloadDriverProto::GetClassData() const { return &_class_data_; }


void WorkloadDriverProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkloadDriverProto*>(&to_msg);
  auto& from = static_cast<const WorkloadDriverProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rome.WorkloadDriverProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ops()->::rome::metrics::MetricProto::MergeFrom(
          from._internal_ops());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_runtime()->::rome::metrics::MetricProto::MergeFrom(
          from._internal_runtime());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_qps()->::rome::metrics::MetricProto::MergeFrom(
          from._internal_qps());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_latency()->::rome::metrics::MetricProto::MergeFrom(
          from._internal_latency());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkloadDriverProto::CopyFrom(const WorkloadDriverProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rome.WorkloadDriverProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkloadDriverProto::IsInitialized() const {
  return true;
}

void WorkloadDriverProto::InternalSwap(WorkloadDriverProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkloadDriverProto, _impl_.latency_)
      + sizeof(WorkloadDriverProto::_impl_.latency_)
      - PROTOBUF_FIELD_OFFSET(WorkloadDriverProto, _impl_.ops_)>(
          reinterpret_cast<char*>(&_impl_.ops_),
          reinterpret_cast<char*>(&other->_impl_.ops_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkloadDriverProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_colosseum_2eproto_getter, &descriptor_table_colosseum_2eproto_once,
      file_level_metadata_colosseum_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rome
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rome::WorkloadDriverProto*
Arena::CreateMaybeMessage< ::rome::WorkloadDriverProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rome::WorkloadDriverProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
