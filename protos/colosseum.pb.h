// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: colosseum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_colosseum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_colosseum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "metrics.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_colosseum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_colosseum_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_colosseum_2eproto;
namespace rome {
class WorkloadDriverProto;
struct WorkloadDriverProtoDefaultTypeInternal;
extern WorkloadDriverProtoDefaultTypeInternal _WorkloadDriverProto_default_instance_;
}  // namespace rome
PROTOBUF_NAMESPACE_OPEN
template<> ::rome::WorkloadDriverProto* Arena::CreateMaybeMessage<::rome::WorkloadDriverProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rome {

// ===================================================================

class WorkloadDriverProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rome.WorkloadDriverProto) */ {
 public:
  inline WorkloadDriverProto() : WorkloadDriverProto(nullptr) {}
  ~WorkloadDriverProto() override;
  explicit PROTOBUF_CONSTEXPR WorkloadDriverProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkloadDriverProto(const WorkloadDriverProto& from);
  WorkloadDriverProto(WorkloadDriverProto&& from) noexcept
    : WorkloadDriverProto() {
    *this = ::std::move(from);
  }

  inline WorkloadDriverProto& operator=(const WorkloadDriverProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkloadDriverProto& operator=(WorkloadDriverProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkloadDriverProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkloadDriverProto* internal_default_instance() {
    return reinterpret_cast<const WorkloadDriverProto*>(
               &_WorkloadDriverProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WorkloadDriverProto& a, WorkloadDriverProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkloadDriverProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkloadDriverProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkloadDriverProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkloadDriverProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WorkloadDriverProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WorkloadDriverProto& from) {
    WorkloadDriverProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkloadDriverProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rome.WorkloadDriverProto";
  }
  protected:
  explicit WorkloadDriverProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpsFieldNumber = 2,
    kRuntimeFieldNumber = 3,
    kQpsFieldNumber = 4,
    kLatencyFieldNumber = 5,
  };
  // optional .rome.metrics.MetricProto ops = 2;
  bool has_ops() const;
  private:
  bool _internal_has_ops() const;
  public:
  void clear_ops();
  const ::rome::metrics::MetricProto& ops() const;
  PROTOBUF_NODISCARD ::rome::metrics::MetricProto* release_ops();
  ::rome::metrics::MetricProto* mutable_ops();
  void set_allocated_ops(::rome::metrics::MetricProto* ops);
  private:
  const ::rome::metrics::MetricProto& _internal_ops() const;
  ::rome::metrics::MetricProto* _internal_mutable_ops();
  public:
  void unsafe_arena_set_allocated_ops(
      ::rome::metrics::MetricProto* ops);
  ::rome::metrics::MetricProto* unsafe_arena_release_ops();

  // optional .rome.metrics.MetricProto runtime = 3;
  bool has_runtime() const;
  private:
  bool _internal_has_runtime() const;
  public:
  void clear_runtime();
  const ::rome::metrics::MetricProto& runtime() const;
  PROTOBUF_NODISCARD ::rome::metrics::MetricProto* release_runtime();
  ::rome::metrics::MetricProto* mutable_runtime();
  void set_allocated_runtime(::rome::metrics::MetricProto* runtime);
  private:
  const ::rome::metrics::MetricProto& _internal_runtime() const;
  ::rome::metrics::MetricProto* _internal_mutable_runtime();
  public:
  void unsafe_arena_set_allocated_runtime(
      ::rome::metrics::MetricProto* runtime);
  ::rome::metrics::MetricProto* unsafe_arena_release_runtime();

  // optional .rome.metrics.MetricProto qps = 4;
  bool has_qps() const;
  private:
  bool _internal_has_qps() const;
  public:
  void clear_qps();
  const ::rome::metrics::MetricProto& qps() const;
  PROTOBUF_NODISCARD ::rome::metrics::MetricProto* release_qps();
  ::rome::metrics::MetricProto* mutable_qps();
  void set_allocated_qps(::rome::metrics::MetricProto* qps);
  private:
  const ::rome::metrics::MetricProto& _internal_qps() const;
  ::rome::metrics::MetricProto* _internal_mutable_qps();
  public:
  void unsafe_arena_set_allocated_qps(
      ::rome::metrics::MetricProto* qps);
  ::rome::metrics::MetricProto* unsafe_arena_release_qps();

  // optional .rome.metrics.MetricProto latency = 5;
  bool has_latency() const;
  private:
  bool _internal_has_latency() const;
  public:
  void clear_latency();
  const ::rome::metrics::MetricProto& latency() const;
  PROTOBUF_NODISCARD ::rome::metrics::MetricProto* release_latency();
  ::rome::metrics::MetricProto* mutable_latency();
  void set_allocated_latency(::rome::metrics::MetricProto* latency);
  private:
  const ::rome::metrics::MetricProto& _internal_latency() const;
  ::rome::metrics::MetricProto* _internal_mutable_latency();
  public:
  void unsafe_arena_set_allocated_latency(
      ::rome::metrics::MetricProto* latency);
  ::rome::metrics::MetricProto* unsafe_arena_release_latency();

  // @@protoc_insertion_point(class_scope:rome.WorkloadDriverProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::rome::metrics::MetricProto* ops_;
    ::rome::metrics::MetricProto* runtime_;
    ::rome::metrics::MetricProto* qps_;
    ::rome::metrics::MetricProto* latency_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_colosseum_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorkloadDriverProto

// optional .rome.metrics.MetricProto ops = 2;
inline bool WorkloadDriverProto::_internal_has_ops() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ops_ != nullptr);
  return value;
}
inline bool WorkloadDriverProto::has_ops() const {
  return _internal_has_ops();
}
inline const ::rome::metrics::MetricProto& WorkloadDriverProto::_internal_ops() const {
  const ::rome::metrics::MetricProto* p = _impl_.ops_;
  return p != nullptr ? *p : reinterpret_cast<const ::rome::metrics::MetricProto&>(
      ::rome::metrics::_MetricProto_default_instance_);
}
inline const ::rome::metrics::MetricProto& WorkloadDriverProto::ops() const {
  // @@protoc_insertion_point(field_get:rome.WorkloadDriverProto.ops)
  return _internal_ops();
}
inline void WorkloadDriverProto::unsafe_arena_set_allocated_ops(
    ::rome::metrics::MetricProto* ops) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ops_);
  }
  _impl_.ops_ = ops;
  if (ops) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rome.WorkloadDriverProto.ops)
}
inline ::rome::metrics::MetricProto* WorkloadDriverProto::release_ops() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::rome::metrics::MetricProto* temp = _impl_.ops_;
  _impl_.ops_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rome::metrics::MetricProto* WorkloadDriverProto::unsafe_arena_release_ops() {
  // @@protoc_insertion_point(field_release:rome.WorkloadDriverProto.ops)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::rome::metrics::MetricProto* temp = _impl_.ops_;
  _impl_.ops_ = nullptr;
  return temp;
}
inline ::rome::metrics::MetricProto* WorkloadDriverProto::_internal_mutable_ops() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ops_ == nullptr) {
    auto* p = CreateMaybeMessage<::rome::metrics::MetricProto>(GetArenaForAllocation());
    _impl_.ops_ = p;
  }
  return _impl_.ops_;
}
inline ::rome::metrics::MetricProto* WorkloadDriverProto::mutable_ops() {
  ::rome::metrics::MetricProto* _msg = _internal_mutable_ops();
  // @@protoc_insertion_point(field_mutable:rome.WorkloadDriverProto.ops)
  return _msg;
}
inline void WorkloadDriverProto::set_allocated_ops(::rome::metrics::MetricProto* ops) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ops_);
  }
  if (ops) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ops));
    if (message_arena != submessage_arena) {
      ops = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ops, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ops_ = ops;
  // @@protoc_insertion_point(field_set_allocated:rome.WorkloadDriverProto.ops)
}

// optional .rome.metrics.MetricProto runtime = 3;
inline bool WorkloadDriverProto::_internal_has_runtime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.runtime_ != nullptr);
  return value;
}
inline bool WorkloadDriverProto::has_runtime() const {
  return _internal_has_runtime();
}
inline const ::rome::metrics::MetricProto& WorkloadDriverProto::_internal_runtime() const {
  const ::rome::metrics::MetricProto* p = _impl_.runtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::rome::metrics::MetricProto&>(
      ::rome::metrics::_MetricProto_default_instance_);
}
inline const ::rome::metrics::MetricProto& WorkloadDriverProto::runtime() const {
  // @@protoc_insertion_point(field_get:rome.WorkloadDriverProto.runtime)
  return _internal_runtime();
}
inline void WorkloadDriverProto::unsafe_arena_set_allocated_runtime(
    ::rome::metrics::MetricProto* runtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.runtime_);
  }
  _impl_.runtime_ = runtime;
  if (runtime) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rome.WorkloadDriverProto.runtime)
}
inline ::rome::metrics::MetricProto* WorkloadDriverProto::release_runtime() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::rome::metrics::MetricProto* temp = _impl_.runtime_;
  _impl_.runtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rome::metrics::MetricProto* WorkloadDriverProto::unsafe_arena_release_runtime() {
  // @@protoc_insertion_point(field_release:rome.WorkloadDriverProto.runtime)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::rome::metrics::MetricProto* temp = _impl_.runtime_;
  _impl_.runtime_ = nullptr;
  return temp;
}
inline ::rome::metrics::MetricProto* WorkloadDriverProto::_internal_mutable_runtime() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.runtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::rome::metrics::MetricProto>(GetArenaForAllocation());
    _impl_.runtime_ = p;
  }
  return _impl_.runtime_;
}
inline ::rome::metrics::MetricProto* WorkloadDriverProto::mutable_runtime() {
  ::rome::metrics::MetricProto* _msg = _internal_mutable_runtime();
  // @@protoc_insertion_point(field_mutable:rome.WorkloadDriverProto.runtime)
  return _msg;
}
inline void WorkloadDriverProto::set_allocated_runtime(::rome::metrics::MetricProto* runtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.runtime_);
  }
  if (runtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime));
    if (message_arena != submessage_arena) {
      runtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.runtime_ = runtime;
  // @@protoc_insertion_point(field_set_allocated:rome.WorkloadDriverProto.runtime)
}

// optional .rome.metrics.MetricProto qps = 4;
inline bool WorkloadDriverProto::_internal_has_qps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.qps_ != nullptr);
  return value;
}
inline bool WorkloadDriverProto::has_qps() const {
  return _internal_has_qps();
}
inline const ::rome::metrics::MetricProto& WorkloadDriverProto::_internal_qps() const {
  const ::rome::metrics::MetricProto* p = _impl_.qps_;
  return p != nullptr ? *p : reinterpret_cast<const ::rome::metrics::MetricProto&>(
      ::rome::metrics::_MetricProto_default_instance_);
}
inline const ::rome::metrics::MetricProto& WorkloadDriverProto::qps() const {
  // @@protoc_insertion_point(field_get:rome.WorkloadDriverProto.qps)
  return _internal_qps();
}
inline void WorkloadDriverProto::unsafe_arena_set_allocated_qps(
    ::rome::metrics::MetricProto* qps) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.qps_);
  }
  _impl_.qps_ = qps;
  if (qps) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rome.WorkloadDriverProto.qps)
}
inline ::rome::metrics::MetricProto* WorkloadDriverProto::release_qps() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::rome::metrics::MetricProto* temp = _impl_.qps_;
  _impl_.qps_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rome::metrics::MetricProto* WorkloadDriverProto::unsafe_arena_release_qps() {
  // @@protoc_insertion_point(field_release:rome.WorkloadDriverProto.qps)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::rome::metrics::MetricProto* temp = _impl_.qps_;
  _impl_.qps_ = nullptr;
  return temp;
}
inline ::rome::metrics::MetricProto* WorkloadDriverProto::_internal_mutable_qps() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.qps_ == nullptr) {
    auto* p = CreateMaybeMessage<::rome::metrics::MetricProto>(GetArenaForAllocation());
    _impl_.qps_ = p;
  }
  return _impl_.qps_;
}
inline ::rome::metrics::MetricProto* WorkloadDriverProto::mutable_qps() {
  ::rome::metrics::MetricProto* _msg = _internal_mutable_qps();
  // @@protoc_insertion_point(field_mutable:rome.WorkloadDriverProto.qps)
  return _msg;
}
inline void WorkloadDriverProto::set_allocated_qps(::rome::metrics::MetricProto* qps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.qps_);
  }
  if (qps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(qps));
    if (message_arena != submessage_arena) {
      qps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qps, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.qps_ = qps;
  // @@protoc_insertion_point(field_set_allocated:rome.WorkloadDriverProto.qps)
}

// optional .rome.metrics.MetricProto latency = 5;
inline bool WorkloadDriverProto::_internal_has_latency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.latency_ != nullptr);
  return value;
}
inline bool WorkloadDriverProto::has_latency() const {
  return _internal_has_latency();
}
inline const ::rome::metrics::MetricProto& WorkloadDriverProto::_internal_latency() const {
  const ::rome::metrics::MetricProto* p = _impl_.latency_;
  return p != nullptr ? *p : reinterpret_cast<const ::rome::metrics::MetricProto&>(
      ::rome::metrics::_MetricProto_default_instance_);
}
inline const ::rome::metrics::MetricProto& WorkloadDriverProto::latency() const {
  // @@protoc_insertion_point(field_get:rome.WorkloadDriverProto.latency)
  return _internal_latency();
}
inline void WorkloadDriverProto::unsafe_arena_set_allocated_latency(
    ::rome::metrics::MetricProto* latency) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.latency_);
  }
  _impl_.latency_ = latency;
  if (latency) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rome.WorkloadDriverProto.latency)
}
inline ::rome::metrics::MetricProto* WorkloadDriverProto::release_latency() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::rome::metrics::MetricProto* temp = _impl_.latency_;
  _impl_.latency_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rome::metrics::MetricProto* WorkloadDriverProto::unsafe_arena_release_latency() {
  // @@protoc_insertion_point(field_release:rome.WorkloadDriverProto.latency)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::rome::metrics::MetricProto* temp = _impl_.latency_;
  _impl_.latency_ = nullptr;
  return temp;
}
inline ::rome::metrics::MetricProto* WorkloadDriverProto::_internal_mutable_latency() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.latency_ == nullptr) {
    auto* p = CreateMaybeMessage<::rome::metrics::MetricProto>(GetArenaForAllocation());
    _impl_.latency_ = p;
  }
  return _impl_.latency_;
}
inline ::rome::metrics::MetricProto* WorkloadDriverProto::mutable_latency() {
  ::rome::metrics::MetricProto* _msg = _internal_mutable_latency();
  // @@protoc_insertion_point(field_mutable:rome.WorkloadDriverProto.latency)
  return _msg;
}
inline void WorkloadDriverProto::set_allocated_latency(::rome::metrics::MetricProto* latency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.latency_);
  }
  if (latency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latency));
    if (message_arena != submessage_arena) {
      latency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latency, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.latency_ = latency;
  // @@protoc_insertion_point(field_set_allocated:rome.WorkloadDriverProto.latency)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace rome

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_colosseum_2eproto
